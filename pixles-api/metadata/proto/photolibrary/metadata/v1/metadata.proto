syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";

package photolibrary.metadata.v1;

// TODO

// Represents a photo metadata entry.
message PhotoMetadata {
  string id = 1; // Unique identifier for the photo
  string filename = 2; // Original filename
  string description = 3; // User-provided description
  google.protobuf.Timestamp creation_time = 4; // When the photo was taken
  google.protobuf.Timestamp upload_time = 5; // When the photo was uploaded
  double latitude = 6; // GPS latitude (optional)
  double longitude = 7; // GPS longitude (optional)
  string mime_type = 8; // MIME type of the photo (e.g., "image/jpeg")
  int64 size_bytes = 9; // Size of the photo file in bytes
  repeated string tags = 10; // User-defined tags
  repeated string album_ids = 11; // IDs of albums this photo belongs to

  // Represents the dimensions of the photo.
  message Dimensions {
    int32 width = 1;
    int32 height = 2;
  }
  Dimensions dimensions = 12;

  // Represents various versions/representations of the photo (e.g., thumbnail, standard).
  message Version {
    string url = 1; // URL to access this version
    string type = 2; // Type of version (e.g., "thumbnail", "standard", "original")
    Dimensions dimensions = 3; // Dimensions of this version
  }
  repeated Version versions = 13;

  string camera_make = 14; // Camera make from EXIF (optional)
  string camera_model = 15; // Camera model from EXIF (optional)
  string lens_model = 16; // Lens model from EXIF (optional)
  double focal_length = 17; // Focal length from EXIF (optional)
  int32 iso_speed_ratings = 18; // ISO speed ratings from EXIF (optional)
  double aperture_f_number = 19; // Aperture F-number from EXIF (optional)
  google.protobuf.Duration exposure_time = 20; // Exposure time from EXIF (optional)

  // Represents the status of the photo (e.g., active, trashed, archived).
  enum Status {
    STATUS_UNSPECIFIED = 0;
    ACTIVE = 1;
    TRASHED = 2;
    ARCHIVED = 3;
  }
  Status status = 21;

  google.protobuf.Timestamp last_modified_time = 22; // Last time the metadata was modified
}

// Represents an album.
message Album {
  string id = 1; // Unique identifier for the album
  string title = 2; // Title of the album
  string description = 3; // Description of the album (optional)
  google.protobuf.Timestamp creation_time = 4; // When the album was created
  google.protobuf.Timestamp last_modified_time = 5; // Last time the album was modified
  string cover_photo_id = 6; // ID of the photo used as the album cover (optional)
  int64 photo_count = 7; // Number of photos in the album
}

// Represents a tag.
message Tag {
  string id = 1; // Unique identifier for the tag
  string name = 2; // The tag name (e.g., "vacation", "pets")
  google.protobuf.Timestamp creation_time = 3; // When the tag was created
}

// Request to list photos. Supports pagination and filtering.
message ListPhotosRequest {
  int32 page_size = 1; // The maximum number of photos to return
  string page_token = 2; // A page token received from a previous ListPhotosResponse
  string album_id = 3; // Filter photos by album ID (optional)
  repeated string tag_names = 4; // Filter photos by tag names (optional)
  google.protobuf.Timestamp start_date = 5; // Filter photos created after this time (inclusive)
  google.protobuf.Timestamp end_date = 6; // Filter photos created before this time (inclusive)
  string query = 7; // Full-text search query (optional)
  StatusFilter status_filter = 8; // Filter by photo status

  // Filter photos by status.
  message StatusFilter {
    repeated PhotoMetadata.Status statuses = 1;
  }
}

// Response for listing photos.
message ListPhotosResponse {
  repeated PhotoMetadata photos = 1; // The list of photos
  string next_page_token = 2; // A token to retrieve the next page of photos (if any)
}

// Request to get a specific photo's metadata.
message GetPhotoRequest {
  string photo_id = 1; // The ID of the photo to retrieve
  google.protobuf.FieldMask view_mask = 2; // Specifies which fields to include in the response (optional)
}

// Response for getting a photo's metadata.
message GetPhotoResponse {
  PhotoMetadata photo = 1; // The requested photo metadata
}

// Request to create a new photo metadata entry.
message CreatePhotoMetadataRequest {
  PhotoMetadata photo = 1; // The photo metadata to create (ID will be assigned by the server)
}

// Response for creating a photo metadata entry.
message CreatePhotoMetadataResponse {
  PhotoMetadata photo = 1; // The created photo metadata (including the assigned ID)
}

// Request to update a photo's metadata.
message UpdatePhotoMetadataRequest {
  PhotoMetadata photo = 1; // The photo metadata to update (must include the ID)
  google.protobuf.FieldMask update_mask = 2; // Specifies which fields to update
}

// Response for updating a photo's metadata.
message UpdatePhotoMetadataResponse {
  PhotoMetadata photo = 1; // The updated photo metadata
}

// Request to delete a photo (move to trash or permanently delete).
message DeletePhotoRequest {
  string photo_id = 1; // The ID of the photo to delete
  bool permanent = 2; // If true, permanently deletes; otherwise, moves to trash
}

// Response for deleting a photo.
message DeletePhotoResponse {
  // Empty response if successful.
}

// Request to list albums. Supports pagination.
message ListAlbumsRequest {
  int32 page_size = 1; // The maximum number of albums to return
  string page_token = 2; // A page token received from a previous ListAlbumsResponse
}

// Response for listing albums.
message ListAlbumsResponse {
  repeated Album albums = 1; // The list of albums
  string next_page_token = 2; // A token to retrieve the next page of albums (if any)
}

// Request to get a specific album.
message GetAlbumRequest {
  string album_id = 1; // The ID of the album to retrieve
}

// Response for getting an album.
message GetAlbumResponse {
  Album album = 1; // The requested album
}

// Request to create a new album.
message CreateAlbumRequest {
  Album album = 1; // The album to create (ID will be assigned by the server)
}

// Response for creating an album.
message CreateAlbumResponse {
  Album album = 1; // The created album (including the assigned ID)
}

// Request to update an album.
message UpdateAlbumRequest {
  Album album = 1; // The album to update (must include the ID)
  google.protobuf.FieldMask update_mask = 2; // Specifies which fields to update
}

// Response for updating an album.
message UpdateAlbumResponse {
  Album album = 1; // The updated album
}

// Request to delete an album.
message DeleteAlbumRequest {
  string album_id = 1; // The ID of the album to delete
}

// Response for deleting an album.
message DeleteAlbumResponse {
  // Empty response if successful.
}

// Request to list tags. Supports pagination.
message ListTagsRequest {
  int32 page_size = 1; // The maximum number of tags to return
  string page_token = 2; // A page token received from a previous ListTagsResponse
}

// Response for listing tags.
message ListTagsResponse {
  repeated Tag tags = 1; // The list of tags
  string next_page_token = 2; // A token to retrieve the next page of tags (if any)
}

// Request to get a specific tag.
message GetTagRequest {
  string tag_id = 1; // The ID of the tag to retrieve
}

// Response for getting a tag.
message GetTagResponse {
  Tag tag = 1; // The requested tag
}

// Request to create a new tag.
message CreateTagRequest {
  Tag tag = 1; // The tag to create (ID will be assigned by the server)
}

// Response for creating a tag.
message CreateTagResponse {
  Tag tag = 1; // The created tag (including the assigned ID)
}

// Request to delete a tag.
message DeleteTagRequest {
  string tag_id = 1; // The ID of the tag to delete
}

// Response for deleting a tag.
message DeleteTagResponse {
  // Empty response if successful.
}

// Request for syncing metadata changes.
message SyncMetadataRequest {
  string sync_token = 1; // The token from the previous sync response to get changes since then
}

// Response for syncing metadata changes.
// This is a stream response to efficiently deliver changes.
message SyncMetadataResponse {
  repeated PhotoMetadata changed_photos = 1; // Photos whose metadata has changed
  repeated string deleted_photo_ids = 2; // IDs of photos that have been deleted
  repeated Album changed_albums = 3; // Albums whose metadata has changed
  repeated string deleted_album_ids = 4; // IDs of albums that have been deleted
  repeated Tag changed_tags = 5; // Tags whose metadata has changed
  repeated string deleted_tag_ids = 6; // IDs of tags that have been deleted
  string next_sync_token = 7; // The token to use for the next sync request
}

// Service definition for the Photo Library Metadata API.
service PhotoLibraryMetadataService {
  // Lists photos.
  rpc ListPhotos(ListPhotosRequest) returns (ListPhotosResponse);

  // Gets a specific photo's metadata.
  rpc GetPhoto(GetPhotoRequest) returns (GetPhotoResponse);

  // Creates a new photo metadata entry.
  rpc CreatePhotoMetadata(CreatePhotoMetadataRequest) returns (CreatePhotoMetadataResponse);

  // Updates a photo's metadata.
  rpc UpdatePhotoMetadata(UpdatePhotoMetadataRequest) returns (UpdatePhotoMetadataResponse);

  // Deletes a photo.
  rpc DeletePhoto(DeletePhotoRequest) returns (DeletePhotoResponse);

  // Lists albums.
  rpc ListAlbums(ListAlbumsRequest) returns (ListAlbumsResponse);

  // Gets a specific album.
  rpc GetAlbum(GetAlbumRequest) returns (GetAlbumResponse);

  // Creates a new album.
  rpc CreateAlbum(CreateAlbumRequest) returns (CreateAlbumResponse);

  // Updates an album.
  rpc UpdateAlbum(UpdateAlbumRequest) returns (UpdateAlbumResponse);

  // Deletes an album.
  rpc DeleteAlbum(DeleteAlbumRequest) returns (DeleteAlbumResponse);

  // Lists tags.
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse);

  // Gets a specific tag.
  rpc GetTag(GetTagRequest) returns (GetTagResponse);

  // Creates a new tag.
  rpc CreateTag(CreateTagRequest) returns (CreateTagResponse);

  // Deletes a tag.
  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse);

  // Syncs metadata changes since the last sync token.
  // This is a server-side streaming RPC.
  rpc SyncMetadata(SyncMetadataRequest) returns (stream SyncMetadataResponse);
}
